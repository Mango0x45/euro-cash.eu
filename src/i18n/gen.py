#!/usr/bin/python3

import concurrent.futures
import dataclasses
import json
import os
import re
import subprocess
import sys
import urllib.request
from dataclasses import dataclass
from typing import TextIO


FILENAME = "locales.gen.go"

@dataclass
class Locale:
	bcp: str
	eurozone: bool
	enabled: bool
	territory: str | None  = dataclasses.field(default=None)
	name: str              = dataclasses.field(init=False)
	date_format: str       = dataclasses.field(init=False)
	group_separator: int   = dataclasses.field(init=False)
	decimal_separator: int = dataclasses.field(init=False)
	monetary_pre: str      = dataclasses.field(init=False)
	monetary_suf: str      = dataclasses.field(init=False)
	percent_format: str    = dataclasses.field(init=False)

LOCALES = (
	Locale(bcp="ca", eurozone=True,  enabled=False),
	Locale(bcp="de", eurozone=True,  enabled=False),
	Locale(bcp="el", eurozone=True,  enabled=False),
	Locale(bcp="en", eurozone=True,  enabled=True,  territory="GB"),
	Locale(bcp="es", eurozone=True,  enabled=False),
	Locale(bcp="et", eurozone=True,  enabled=False),
	Locale(bcp="fi", eurozone=True,  enabled=False),
	Locale(bcp="fr", eurozone=True,  enabled=False),
	Locale(bcp="ga", eurozone=True,  enabled=False),
	Locale(bcp="hr", eurozone=True,  enabled=False),
	Locale(bcp="it", eurozone=True,  enabled=False),
	Locale(bcp="lb", eurozone=True,  enabled=False),
	Locale(bcp="lt", eurozone=True,  enabled=False),
	Locale(bcp="lv", eurozone=True,  enabled=False),
	Locale(bcp="mt", eurozone=True,  enabled=False),
	Locale(bcp="nl", eurozone=True,  enabled=True),
	Locale(bcp="pt", eurozone=True,  enabled=False, territory="PT"),
	Locale(bcp="sk", eurozone=True,  enabled=False),
	Locale(bcp="sl", eurozone=True,  enabled=False),
	Locale(bcp="sv", eurozone=True,  enabled=True),
	Locale(bcp="tr", eurozone=True,  enabled=False),
	Locale(bcp="bg", eurozone=False, enabled=False),
	Locale(bcp="ro", eurozone=False, enabled=False),
	Locale(bcp="uk", eurozone=False, enabled=False),
)

BASELINK = "https://raw.githubusercontent.com/unicode-org/cldr-json/refs/heads/main/cldr-json/%s/main/%%s/%s"
NUMBERS_LINK, DATES_LINK, LANGUAGES_LINK = (
	BASELINK % ("cldr-numbers-full", "numbers.json"),
	BASELINK % ("cldr-dates-full", "ca-gregorian.json"),
	BASELINK % ("cldr-localenames-full", "languages.json"),
)


def main() -> int:
	rv = 0
	nprocs = os.cpu_count()
	with concurrent.futures.ThreadPoolExecutor(max_workers=nprocs) as executor:
		for x in [executor.submit(write_locale, l) for l in LOCALES]:
			try:
				x.result()
			except Exception as e:
				print(f"gen.py: {e}", file=sys.stderr)
				rv = 1

	with open(FILENAME, "w") as f:
		f.write("""// Code generated by gen.py.  DO NOT EDIT.

package i18n

import "github.com/leonelquinteros/gotext"

type LocaleInfo struct {
	Bcp, Name                        string
	Eurozone, Enabled                bool
	DateFormat                       string
	GroupSeparator, DecimalSeparator rune
	MonetaryPre                      [2]string
	MonetarySuf                      string
	PercentFormat                    string
}

var locales = [...]LocaleInfo{
""")
		for x in LOCALES:
			f.write("{\n")
			for k, v in x.__dict__.items():
				if not v or k == "territory":
					continue
				f.write("%s: " % pascal(k))
				match v:
					case bool():
						f.write("true" if v else "false")
					case int():
						f.write("'%s'" % chr(v))
					case str() if not v.startswith("gotext"):
						f.write('"%s"' % v)
					case str():
						f.write(v)
					case [str(), str()]:
						f.write('[2]string{"%s", "%s"}' % (v[0], v[1]))
				f.write(",\n")
			f.write("},\n")
		f.write("}")

	subprocess.run(["gofmt", "-w", FILENAME])
	return rv


def write_locale(l: Locale) -> None:
	bcp = '%s-%s' % (l.bcp, l.territory) if l.territory else l.bcp
	jn, jd, jl = map(json.load, (
		urllib.request.urlopen(NUMBERS_LINK % bcp),
		urllib.request.urlopen(DATES_LINK % bcp),
		urllib.request.urlopen(LANGUAGES_LINK % bcp),
	))
	name = jl["main"][bcp]["localeDisplayNames"]["languages"][l.bcp].capitalize()
	l.name = 'gotext.GetC("%s", "Language Name")' % name
	syms = jn["main"][bcp]["numbers"]["symbols-numberSystem-latn"]
	l.group_separator = ord(syms["group"])
	l.decimal_separator = ord(syms["decimal"])

	fmt = jn["main"][bcp]["numbers"]["percentFormats-numberSystem-latn"]["standard"]
	fmt = fmt.replace("%", "%%")
	l.percent_format = re.sub(r"[0#,.]+", "%s", fmt)

	fmt = jd["main"][bcp]["dates"]["calendars"]["gregorian"]["dateFormats"]["short"]
	l.date_format = (
		fmt
			.replace("yy", "06")
			.replace("MM", "01")
			.replace("dd", "02")
			.replace("y", "2006")
			.replace("M", "1")
			.replace("d", "2")
			.replace("'", "")
	)

	fmt = jn["main"][bcp]["numbers"]["currencyFormats-numberSystem-latn"]["standard"]
	parts = fmt.replace("¤", "€").split(";")
	l.monetary_pre = ["", ""]

	for i, x in enumerate(parts):
		pre_suf = re.split(r"[0#,.]+", x)
		l.monetary_pre[i] = pre_suf[0]
		l.monetary_suf = pre_suf[1]
	if len(parts) == 1:
		l.monetary_pre[1] = "-" + l.monetary_pre[0]


def pascal(s: str) -> str:
	return ''.join(map(str.capitalize, s.split('_')))


if __name__ == "__main__":
	os.chdir(os.path.dirname(sys.argv[0]))
	sys.exit(main())